{"version":3,"sources":["views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/UserProfileSidebar.js","views/apps/chat/index.js"],"names":["ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","userSidebarLeft","userProfile","selectedUser","chatArea","useRef","dispatch","useDispatch","useState","msg","setMsg","visible","setVisible","x","y","anchorPoint","setAnchorPoint","selected","setSelected","sender","setSender","op","setOp","ref","createRef","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","formattedChatData","chatLog","chat","formattedChatLog","chatMessageSenderId","senderId","undefined","msgGroup","messages","forEach","index","push","message","time","repliedTo","starred","handleClick","event","preventDefault","pageX","pageY","handleReplyClick","e","focus","handleStarMsg","starMsg","handleEditMsg","handleDeleteMsg","deleteMsg","ChatWrapper","PerfectScrollbar","className","classnames","onClick","window","innerWidth","size","imgHeight","imgWidth","img","contact","avatar","status","obj","fullName","color","end","href","chatData","map","item","style","borderLeft","height","display","gridTemplateColumns","renderPinnedPost","options","wheelPropagation","opacity","backgroundColor","onContextMenu","top","left","renderChats","border","marginTop","marginLeft","cursor","src","width","onSubmit","editMsg","editedMsg","sendMsg","handleSendMsg","innerRef","value","onChange","target","placeholder","for","type","id","hidden","SidebarLeft","sidebar","handleUserSidebarLeft","chats","contacts","query","setQuery","about","setAbout","active","setActive","setStatus","filteredChat","setFilteredChat","filteredContacts","setFilteredContacts","handleUserClick","selectChat","isObjEmpty","show","role","rows","defaultValue","label","checked","name","defaultChecked","searchFilterFunction","toLowerCase","includes","filteredChatsArr","filter","filteredContactssArr","formatDateToMonthShort","lastMessage","Date","unseenMsgs","pill","UserProfileSidebar","user","userSidebarRight","AppChat","useSelector","state","setUser","setSidebar","setUserSidebarRight","setUserSidebarLeft","getChatContacts","getUserProfile"],"mappings":"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","file":"static/js/50.a2f9ffa2.chunk.js","sourcesContent":["// ** React Imports\r\nimport ReactDOM from 'react-dom'\r\nimport { useState, useEffect, useRef, createRef } from 'react'\r\n\r\nimport './Chat.css'\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { deleteMsg, editMsg, sendMsg, starMsg } from './store'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { MessageSquare, Menu, PhoneCall, Video, Search, MoreVertical, Mic, Image, Send } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  InputGroup,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  InputGroupText,\r\n  UncontrolledDropdown\r\n} from 'reactstrap'\r\n\r\nconst ChatLog = props => {\r\n  // ** Props & Store\r\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\r\n  const { userProfile, selectedUser } = store\r\n\r\n  // ** Refs & Dispatch\r\n  const chatArea = useRef(null)\r\n  const dispatch = useDispatch()\r\n\r\n  // ** State\r\n  const [msg, setMsg] = useState('')\r\n  const [visible, setVisible] = useState(false)\r\n  //const [reply, setReply] = useState(false)\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 })\r\n  const [selected, setSelected] = useState(null)\r\n  const [sender, setSender] = useState(null)\r\n  const [op, setOp] = useState('')\r\n  const ref = createRef()\r\n\r\n  // ** Scroll to chat bottom\r\n  const scrollToBottom = () => {\r\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\r\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\r\n  }\r\n\r\n  // ** If user chat is not empty scrollToBottom\r\n  useEffect(() => {\r\n    const selectedUserLen = Object.keys(selectedUser).length\r\n\r\n    if (selectedUserLen) {\r\n      scrollToBottom()\r\n    }\r\n  }, [selectedUser])\r\n\r\n  // ** Formats chat data based on sender\r\n  const formattedChatData = () => {\r\n    let chatLog = []\r\n    if (selectedUser.chat) {\r\n      chatLog = selectedUser.chat.chat\r\n    }\r\n\r\n    const formattedChatLog = []\r\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\r\n    let msgGroup = {\r\n      senderId: chatMessageSenderId,\r\n      messages: []\r\n    }\r\n    //console.log(chatLog)\r\n    chatLog.forEach((msg, index) => {\r\n      if (chatMessageSenderId === msg.senderId) {\r\n        msgGroup.messages.push({\r\n          msg: msg.message,\r\n          time: msg.time,\r\n          repliedTo: msg.repliedTo !== undefined ? msg.repliedTo : null,\r\n          starred : msg.starred !== undefined ? msg.starred : null\r\n        })\r\n      } else {\r\n        chatMessageSenderId = msg.senderId\r\n        formattedChatLog.push(msgGroup)\r\n        msgGroup = {\r\n          senderId: msg.senderId,\r\n          messages: [\r\n            {\r\n              msg: msg.message,\r\n              time: msg.time,\r\n              repliedTo: msg.repliedTo !== undefined ? msg.repliedTo : null,\r\n              starred : msg.starred !== undefined ? msg.starred : null\r\n            }\r\n          ]\r\n        }\r\n      }\r\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\r\n    })\r\n    return formattedChatLog\r\n  }\r\n\r\n  const handleClick = (event, sender, msg) => {\r\n    event.preventDefault()\r\n    setVisible(true)\r\n    setAnchorPoint({ x: event.pageX, y: event.pageY })\r\n    setSelected(msg)\r\n    setSender(sender)\r\n    //console.log(index)\r\n  }\r\n\r\n  const handleReplyClick = e => {\r\n    e.preventDefault()\r\n    ref.current.focus()\r\n    setOp('reply')\r\n    setVisible(false)\r\n  }\r\n\r\n  const handleStarMsg = e => {\r\n    e.preventDefault()\r\n    dispatch(starMsg({...selectedUser, message: selected }))\r\n    setSelected(null)\r\n    setVisible(false)\r\n  }\r\n\r\n  const handleEditMsg = e => {\r\n    e.preventDefault()\r\n    ref.current.focus()\r\n    setOp('edit')\r\n    setMsg(selected)\r\n    setVisible(false)\r\n  }\r\n\r\n  const handleDeleteMsg = e => {\r\n    e.preventDefault()\r\n    dispatch(deleteMsg({...selectedUser, message: selected, senderId : sender}))\r\n    setSelected(null)\r\n    setVisible(false)\r\n  }\r\n\r\n  // ** Renders user chat\r\n  const renderChats = () => {\r\n    const chatData = formattedChatData()\r\n    return (\r\n      <>\r\n      {\r\n        chatData.map((item, index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={classnames('chat', {\r\n              'chat-left': item.senderId !== 11\r\n            })}\r\n            onClick={() => { setVisible(false); setMsg('') }}\r\n          >\r\n            <div className='chat-avatar'>\r\n              <Avatar\r\n                imgWidth={36}\r\n                imgHeight={36}\r\n                className='box-shadow-1 cursor-pointer'\r\n                img={item.senderId === 11 ? userProfile.avatar : selectedUser.contact.avatar}\r\n              />\r\n            </div>\r\n            \r\n\r\n            <div className='chat-body'>\r\n              {item.messages.map((chat) => (\r\n                <div key={chat.msg} className='chat-content'>\r\n                  {\r\n                    chat.repliedTo !== null ? <div>\r\n                      <div style={{ opacity:'0.5', backgroundColor:'white', color : 'black' }}>{chat.repliedTo}</div>\r\n                      <p onContextMenu={e => handleClick(e, item.senderId, chat.msg)}>{chat.msg}</p>\r\n                    </div> : <p onContextMenu={e => handleClick(e, item.senderId, chat.msg)}>{chat.msg}</p>\r\n                  }\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          )\r\n        })\r\n      }\r\n      { \r\n        visible &&\r\n        <div style={{ top: anchorPoint.y, left: anchorPoint.x }} className=\"contextMenu\">\r\n          <div className=\"contextMenu--option\" onClick={handleReplyClick}>Reply</div>\r\n          <div className=\"contextMenu--option\" onClick={handleStarMsg}>Pin</div>\r\n          {sender === 11 && <div className=\"contextMenu--option\" onClick={handleEditMsg}>Edit</div>}\r\n          <div className=\"contextMenu--option\" onClick={handleDeleteMsg}>Delete</div>\r\n        </div>\r\n      }\r\n      </>\r\n    )\r\n  }\r\n\r\n  const renderPinnedPost = () => {\r\n    const chatData = formattedChatData()\r\n    return (\r\n      <>\r\n      {\r\n        chatData.map((item) => {\r\n        return (\r\n            <>\r\n            {item.messages.map((chat) => (\r\n              <>\r\n                {\r\n                  chat.starred !== null &&\r\n                  <>\r\n                    <div style={{ borderLeft: \"6px solid blue\", height: \"45px\" }}></div>\r\n                    <div style={{ display:'grid', gridTemplateColumns:'100%'}}>\r\n                      <div style={{color:'blue'}}>Pinned Message</div>\r\n                      <div>{chat.msg}</div>\r\n                    </div>\r\n                  </>\r\n                }\r\n              </>\r\n            ))}\r\n            </>\r\n          )\r\n        })\r\n      }\r\n      </>\r\n    )\r\n  }\r\n\r\n  // ** Opens right sidebar & handles its data\r\n  const handleAvatarClick = obj => {\r\n    handleUserSidebarRight()\r\n    handleUser(obj)\r\n  }\r\n\r\n  // ** On mobile screen open left sidebar on Start Conversation Click\r\n  const handleStartConversation = () => {\r\n    if (!Object.keys(selectedUser).length && !userSidebarLeft && window.innerWidth < 992) {\r\n      handleSidebar()\r\n    }\r\n  }\r\n\r\n  // ** Sends New Msg\r\n  const handleSendMsg = e => {\r\n    e.preventDefault()\r\n    if (msg.length && op === 'edit') {\r\n      dispatch(editMsg({...selectedUser, message: selected, editedMsg: msg }))\r\n    } else if (msg.length) {\r\n      dispatch(sendMsg({ ...selectedUser, message: msg, repliedTo : selected  }))\r\n      setMsg('')\r\n      setSelected(null)\r\n    }\r\n    setOp('')\r\n  }\r\n\r\n  // ** ChatWrapper tag based on chat's length\r\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\r\n\r\n  return (\r\n    <div className='chat-app-window'>\r\n      <div className={classnames('start-chat-area', { 'd-none': Object.keys(selectedUser).length })}>\r\n        <div className='start-chat-icon mb-1'>\r\n          <MessageSquare />\r\n        </div>\r\n        <h4 className='sidebar-toggle start-chat-text' onClick={handleStartConversation}>\r\n          Start Conversation\r\n        </h4>\r\n      </div>\r\n      {Object.keys(selectedUser).length ? (\r\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\r\n          <div className='chat-navbar'>\r\n            <header className='chat-header'>\r\n              <div className='d-flex align-items-center'>\r\n                <div className='sidebar-toggle d-block d-lg-none me-1' onClick={handleSidebar}>\r\n                  <Menu size={21} />\r\n                </div>\r\n                <Avatar\r\n                  imgHeight='36'\r\n                  imgWidth='36'\r\n                  img={selectedUser.contact.avatar}\r\n                  status={selectedUser.contact.status}\r\n                  className='avatar-border user-profile-toggle m-0 me-1'\r\n                  onClick={() => handleAvatarClick(selectedUser.contact)}\r\n                />\r\n                <h6 className='mb-0'>{selectedUser.contact.fullName}</h6>\r\n              </div>\r\n              <div className='d-flex align-items-center'>\r\n                <PhoneCall size={18} className='cursor-pointer d-sm-block d-none me-1' />\r\n                <Video size={18} className='cursor-pointer d-sm-block d-none me-1' />\r\n                <Search size={18} className='cursor-pointer d-sm-block d-none' />\r\n                <UncontrolledDropdown className='more-options-dropdown'>\r\n                  <DropdownToggle className='btn-icon' color='transparent' size='sm'>\r\n                    <MoreVertical size='18' />\r\n                  </DropdownToggle>\r\n                  <DropdownMenu end>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      View Contact\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Mute Notifications\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Block Contact\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Clear Chat\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Report\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </div>\r\n            </header>\r\n            <div className='chat-pinned'>\r\n              <>{renderPinnedPost()}</>\r\n            </div>\r\n          </div>\r\n\r\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\r\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\r\n          </ChatWrapper>\r\n\r\n          {\r\n            selected !== null &&\r\n            <div style={{display:'grid', gridTemplateColumns:'20% 78% 2%', border:'1px solid black', marginTop:'2%'}}>\r\n              <div style={{ borderLeft: \"6px solid green\", height: \"45px\" }}></div>\r\n              <div style={{ marginLeft:'-20%'}}>{selected}</div>\r\n              <div style={{ cursor:'pointer'}}><img src='https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-close-512.png' width='10px' onClick={() => { setSelected(null); setMsg('') }}/></div>\r\n            </div>\r\n          }\r\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\r\n            <InputGroup  className='input-group-merge me-1 form-send-message'>\r\n              <InputGroupText>\r\n                <Mic className='cursor-pointer' size={14} />\r\n              </InputGroupText>\r\n              <Input innerRef={ref}\r\n                value={msg}\r\n                onChange={e => setMsg(e.target.value)}\r\n                placeholder='Type your message or use speech to text'\r\n              />\r\n              <InputGroupText>\r\n                <Label className='attachment-icon mb-0' for='attach-doc'>\r\n                  <Image className='cursor-pointer text-secondary' size={14} />\r\n                  <input type='file' id='attach-doc' hidden />\r\n                </Label>\r\n              </InputGroupText>\r\n            </InputGroup>\r\n            <Button className='send' color='primary'>\r\n              <Send size={14} className='d-lg-none' />\r\n              <span className='d-none d-lg-block'>Send</span>\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatLog\r\n","// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { selectChat } from './store'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n// ** Utils\r\nimport { formatDateToMonthShort, isObjEmpty } from '@utils'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { X, Search, CheckSquare, Bell, User, Trash } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardText, InputGroup, InputGroupText, Badge, Input, Button, Label } from 'reactstrap'\r\n\r\nconst SidebarLeft = props => {\r\n  // ** Props & Store\r\n  const { store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft } = props\r\n  const { chats, contacts, userProfile } = store\r\n\r\n  // ** Dispatch\r\n  const dispatch = useDispatch()\r\n\r\n  // ** State\r\n  const [query, setQuery] = useState('')\r\n  const [about, setAbout] = useState('')\r\n  const [active, setActive] = useState(0)\r\n  const [status, setStatus] = useState('online')\r\n  const [filteredChat, setFilteredChat] = useState([])\r\n  const [filteredContacts, setFilteredContacts] = useState([])\r\n\r\n  // ** Handles User Chat Click\r\n  const handleUserClick = id => {\r\n    dispatch(selectChat(id))\r\n    setActive(id)\r\n    if (sidebar === true) {\r\n      handleSidebar()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isObjEmpty(store.selectedUser)) {\r\n      if (store.selectedUser.chat) {\r\n        setActive(store.selectedUser.chat.id)\r\n      } else {\r\n        setActive(store.selectedUser.contact.id)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // ** Renders Chat\r\n  const renderChats = () => {\r\n    if (chats && chats.length) {\r\n      if (query.length && !filteredChat.length) {\r\n        return (\r\n          <li className='no-results show'>\r\n            <h6 className='mb-0'>No Chats Found</h6>\r\n          </li>\r\n        )\r\n      } else {\r\n        const arrToMap = query.length && filteredChat.length ? filteredChat : chats\r\n\r\n        return arrToMap.map(item => {\r\n          const time = formatDateToMonthShort(item.chat.lastMessage ? item.chat.lastMessage.time : new Date())\r\n\r\n          return (\r\n            <li\r\n              key={item.id}\r\n              onClick={() => handleUserClick(item.id)}\r\n              className={classnames({\r\n                active: active === item.id\r\n              })}\r\n            >\r\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' status={item.status} />\r\n              <div className='chat-info flex-grow-1'>\r\n                <h5 className='mb-0'>{item.fullName}</h5>\r\n                <CardText className='text-truncate'>\r\n                  {item.chat.lastMessage ? item.chat.lastMessage.message : chats[chats.length - 1].message}\r\n                </CardText>\r\n              </div>\r\n              <div className='chat-meta text-nowrap'>\r\n                <small className='float-end mb-25 chat-time ms-25'>{time}</small>\r\n                {item.chat.unseenMsgs >= 1 ? (\r\n                  <Badge className='float-end' color='danger' pill>\r\n                    {item.chat.unseenMsgs}\r\n                  </Badge>\r\n                ) : null}\r\n              </div>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // ** Renders Contact\r\n  const renderContacts = () => {\r\n    if (contacts && contacts.length) {\r\n      if (query.length && !filteredContacts.length) {\r\n        return (\r\n          <li className='no-results show'>\r\n            <h6 className='mb-0'>No Chats Found</h6>\r\n          </li>\r\n        )\r\n      } else {\r\n        const arrToMap = query.length && filteredContacts.length ? filteredContacts : contacts\r\n        return arrToMap.map(item => {\r\n          return (\r\n            <li key={item.fullName} onClick={() => handleUserClick(item.id)}>\r\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' />\r\n              <div className='chat-info flex-grow-1'>\r\n                <h5 className='mb-0'>{item.fullName}</h5>\r\n                <CardText className='text-truncate'>{item.about}</CardText>\r\n              </div>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // ** Handles Filter\r\n  const handleFilter = e => {\r\n    setQuery(e.target.value)\r\n    const searchFilterFunction = contact => contact.fullName.toLowerCase().includes(e.target.value.toLowerCase())\r\n    const filteredChatsArr = chats.filter(searchFilterFunction)\r\n    const filteredContactssArr = contacts.filter(searchFilterFunction)\r\n    setFilteredChat([...filteredChatsArr])\r\n    setFilteredContacts([...filteredContactssArr])\r\n  }\r\n\r\n  const renderAboutCount = () => {\r\n    if (userProfile && userProfile.about && userProfile.about.length && about.length === 0) {\r\n      return userProfile.about.length\r\n    } else {\r\n      return about.length\r\n    }\r\n  }\r\n\r\n  return store ? (\r\n    <div className='sidebar-left'>\r\n      <div className='sidebar'>\r\n        <div\r\n          className={classnames('chat-profile-sidebar', {\r\n            show: userSidebarLeft\r\n          })}\r\n        >\r\n          <header className='chat-profile-header'>\r\n            <div className='close-icon' onClick={handleUserSidebarLeft}>\r\n              <X size={14} />\r\n            </div>\r\n            <div className='header-profile-sidebar'>\r\n              <Avatar className='box-shadow-1 avatar-border' img={userProfile.avatar} status={status} size='xl' />\r\n              <h4 className='chat-user-name'>{userProfile.fullName}</h4>\r\n              <span className='user-post'>{userProfile.role}</span>\r\n            </div>\r\n          </header>\r\n          <PerfectScrollbar className='profile-sidebar-area' options={{ wheelPropagation: false }}>\r\n            <h6 className='section-label mb-1'>About</h6>\r\n            <div className='about-user'>\r\n              <Input\r\n                rows='5'\r\n                type='textarea'\r\n                defaultValue={userProfile.about}\r\n                onChange={e => setAbout(e.target.value)}\r\n                className={classnames('char-textarea', {\r\n                  'text-danger': about && about.length > 120\r\n                })}\r\n              />\r\n              <small className='counter-value float-end'>\r\n                <span className='char-count'>{renderAboutCount()}</span> / 120\r\n              </small>\r\n            </div>\r\n            <h6 className='section-label mb-1 mt-3'>Status</h6>\r\n            <ul className='list-unstyled user-status'>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-success'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Online'\r\n                    id='user-online'\r\n                    checked={status === 'online'}\r\n                    onChange={() => setStatus('online')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-online'>\r\n                    Online\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-danger'>\r\n                  <Input\r\n                    type='radio'\r\n                    id='user-busy'\r\n                    label='Do Not Disturb'\r\n                    checked={status === 'busy'}\r\n                    onChange={() => setStatus('busy')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-busy'>\r\n                    Busy\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-warning'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Away'\r\n                    id='user-away'\r\n                    checked={status === 'away'}\r\n                    onChange={() => setStatus('away')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-away'>\r\n                    Away\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-secondary'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Offline'\r\n                    id='user-offline'\r\n                    checked={status === 'offline'}\r\n                    onChange={() => setStatus('offline')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-offline'>\r\n                    Offline\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <h6 className='section-label mb-1 mt-2'>Settings</h6>\r\n            <ul className='list-unstyled'>\r\n              <li className='d-flex justify-content-between align-items-center mb-1'>\r\n                <div className='d-flex align-items-center'>\r\n                  <CheckSquare className='me-75' size='18' />\r\n                  <span className='align-middle'>Two-step Verification</span>\r\n                </div>\r\n                <div className='form-switch'>\r\n                  <Input type='switch' id='verification' name='verification' defaultChecked />\r\n                </div>\r\n              </li>\r\n              <li className='d-flex justify-content-between align-items-center mb-1'>\r\n                <div className='d-flex align-items-center'>\r\n                  <Bell className='me-75' size='18' />\r\n                  <span className='align-middle'>Notification</span>\r\n                </div>\r\n                <div className='form-switch'>\r\n                  <Input type='switch' id='notifications' name='notifications' />\r\n                </div>\r\n              </li>\r\n              <li className='d-flex align-items-center cursor-pointer mb-1'>\r\n                <User className='me-75' size='18' />\r\n                <span className='align-middle'>Invite Friends</span>\r\n              </li>\r\n              <li className='d-flex align-items-center cursor-pointer'>\r\n                <Trash className='me-75' size='18' />\r\n                <span className='align-middle'>Delete Account</span>\r\n              </li>\r\n            </ul>\r\n            <div className='mt-3'>\r\n              <Button color='primary'>Logout</Button>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </div>\r\n        <div\r\n          className={classnames('sidebar-content', {\r\n            show: sidebar === true\r\n          })}\r\n        >\r\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\r\n            <X size={14} />\r\n          </div>\r\n          <div className='chat-fixed-search'>\r\n            <div className='d-flex align-items-center w-100'>\r\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\r\n                {Object.keys(userProfile).length ? (\r\n                  <Avatar\r\n                    className='avatar-border'\r\n                    img={userProfile.avatar}\r\n                    status={status}\r\n                    imgHeight='42'\r\n                    imgWidth='42'\r\n                  />\r\n                ) : null}\r\n              </div>\r\n              <InputGroup className='input-group-merge ms-1 w-100'>\r\n                <InputGroupText className='round'>\r\n                  <Search className='text-muted' size={14} />\r\n                </InputGroupText>\r\n                <Input\r\n                  value={query}\r\n                  className='round'\r\n                  placeholder='Search or start a new chat'\r\n                  onChange={handleFilter}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\r\n            <h4 className='chat-list-title'>Chats</h4>\r\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\r\n            <h4 className='chat-list-title'>Contacts</h4>\r\n            <ul className='chat-users-list contact-list media-list'>{renderContacts()}</ul>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null\r\n}\r\n\r\nexport default SidebarLeft\r\n","// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// ** Reactstrap Imports\r\nimport { X, Mail, PhoneCall, Clock, Tag, Star, Image, Trash, Slash } from 'react-feather'\r\n\r\nconst UserProfileSidebar = props => {\r\n  // ** Props\r\n  const { user, handleUserSidebarRight, userSidebarRight } = props\r\n\r\n  return (\r\n    <div className={classnames('user-profile-sidebar', { show: userSidebarRight === true })}>\r\n      <header className='user-profile-header'>\r\n        <span className='close-icon' onClick={handleUserSidebarRight}>\r\n          <X size={14} />\r\n        </span>\r\n        <div className='header-profile-sidebar'>\r\n          <Avatar\r\n            className='box-shadow-1 avatar-border'\r\n            size='xl'\r\n            status={user.status}\r\n            img={user.avatar}\r\n            imgHeight='70'\r\n            imgWidth='70'\r\n          />\r\n          <h4 className='chat-user-name'>{user.fullName}</h4>\r\n          <span className='user-post'>{user.role}</span>\r\n        </div>\r\n      </header>\r\n      <PerfectScrollbar className='user-profile-sidebar-area' options={{ wheelPropagation: false }}>\r\n        <h6 className='section-label mb-1'>About</h6>\r\n        <p>{user.about}</p>\r\n        <div className='personal-info'>\r\n          <h6 className='section-label mb-1 mt-3'>Personal Information</h6>\r\n          <ul className='list-unstyled'>\r\n            <li className='mb-1'>\r\n              <Mail className='me-75' size={17} />\r\n              <span className='align-middle'>lucifer@email.com</span>\r\n            </li>\r\n            <li className='mb-1'>\r\n              <PhoneCall className='me-50' size={17} />\r\n              <span className='align-middle'> +1(123) 456 - 7890</span>\r\n            </li>\r\n            <li>\r\n              <Clock className='me-50' size={17} />\r\n              <span className='align-middle'> Mon - Fri 10AM - 8PM</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='more-options'>\r\n          <h6 className='section-label mb-1 mt-3'>Options</h6>\r\n          <ul className='list-unstyled'>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Tag className='me-50' size={17} />\r\n              <span className='align-middle'> Add Tag</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Star className='me-50' size={17} />\r\n              <span className='align-middle'> Important Contact</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Image className='me-50' size={17} />\r\n              <span className='align-middle'> Shared Media</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Trash className='me-50' size={17} />\r\n              <span className='align-middle'> Delete Contact</span>\r\n            </li>\r\n            <li className='cursor-pointer'>\r\n              <Slash className='me-75' size={17} />\r\n              <span className='align-middle'>Block Contact</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </PerfectScrollbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserProfileSidebar\r\n","// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Chat App Component Imports\r\nimport Chat from './Chat'\r\nimport Sidebar from './SidebarLeft'\r\nimport UserProfileSidebar from './UserProfileSidebar'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserProfile, getChatContacts } from './store'\r\n\r\nimport '@styles/base/pages/app-chat.scss'\r\nimport '@styles/base/pages/app-chat-list.scss'\r\n\r\nconst AppChat = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.chat)\r\n\r\n  // ** States\r\n  const [user, setUser] = useState({})\r\n  const [sidebar, setSidebar] = useState(false)\r\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\r\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\r\n\r\n  // ** Sidebar & overlay toggle functions\r\n  const handleSidebar = () => setSidebar(!sidebar)\r\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\r\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\r\n  const handleOverlayClick = () => {\r\n    setSidebar(false)\r\n    setUserSidebarRight(false)\r\n    setUserSidebarLeft(false)\r\n  }\r\n\r\n  // ** Set user function for Right Sidebar\r\n  const handleUser = obj => setUser(obj)\r\n\r\n  // ** Get data on Mount\r\n  useEffect(() => {\r\n    dispatch(getChatContacts())\r\n    dispatch(getUserProfile())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar\r\n        store={store}\r\n        sidebar={sidebar}\r\n        handleSidebar={handleSidebar}\r\n        userSidebarLeft={userSidebarLeft}\r\n        handleUserSidebarLeft={handleUserSidebarLeft}\r\n      />\r\n      <div className='content-right'>\r\n        <div className='content-wrapper'>\r\n          <div className='content-body'>\r\n            <div\r\n              className={classnames('body-content-overlay', {\r\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\r\n              })}\r\n              onClick={handleOverlayClick}\r\n            ></div>\r\n            <Chat\r\n              store={store}\r\n              handleUser={handleUser}\r\n              handleSidebar={handleSidebar}\r\n              userSidebarLeft={userSidebarLeft}\r\n              handleUserSidebarRight={handleUserSidebarRight}\r\n            />\r\n            <UserProfileSidebar\r\n              user={user}\r\n              userSidebarRight={userSidebarRight}\r\n              handleUserSidebarRight={handleUserSidebarRight}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AppChat\r\n"],"sourceRoot":""}