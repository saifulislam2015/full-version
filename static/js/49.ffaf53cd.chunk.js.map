{"version":3,"sources":["views/extensions/import-export/Import.js","@core/components/extensions-header/index.js"],"names":["ErrorToast","className","size","color","icon","role","Import","useState","name","setName","value","setValue","tableData","setTableData","filteredData","setFilteredData","useDropzone","multiple","onDrop","result","reader","FileReader","onload","fileData","wb","XLSX","read","type","SheetNames","forEach","sheetName","arr","getTableData","utils","sheet_to_row_object_array","Sheets","length","endsWith","readAsBinaryString","toast","error","hideProgressBar","getRootProps","getInputProps","headArr","map","col","index","Object","keys","dataArr","title","subTitle","link","sm","href","onClick","e","preventDefault","tag","for","id","bsSize","onChange","data","target","filter","startsWithCondition","key","toString","toLowerCase","startsWith","includesCondition","includes","handleFilter","responsive","head","renderTd","ExtensionsHeader","props","rel"],"mappings":"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","file":"static/js/49.ffaf53cd.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport XLSX from 'xlsx'\r\nimport { toast } from 'react-toastify'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { X, DownloadCloud } from 'react-feather'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport ExtensionsHeader from '@components/extensions-header'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, Card, CardBody, Table, CardHeader, CardTitle, Input, Label } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\r\n\r\nconst ErrorToast = () => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\r\n        <h6 className='toast-title'>Error!</h6>\r\n      </div>\r\n      <small className='text-muted'>a second ago</small>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span role='img' aria-label='toast-text'>\r\n        ðŸ‘‹ You can only upload <span className='fw-bolder'>.xlsx</span>, <span className='fw-bolder'>.xls</span> &{' '}\r\n        <span className='fw-bolder'>.csv</span> Files!.\r\n      </span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Import = () => {\r\n  // ** States\r\n  const [name, setName] = useState('')\r\n  const [value, setValue] = useState('')\r\n  const [tableData, setTableData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  const getTableData = (arr, name) => {\r\n    setTableData(arr)\r\n    setName(name)\r\n  }\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    multiple: false,\r\n    onDrop: result => {\r\n      const reader = new FileReader()\r\n      reader.onload = function () {\r\n        const fileData = reader.result\r\n        const wb = XLSX.read(fileData, { type: 'binary' })\r\n\r\n        wb.SheetNames.forEach(function (sheetName) {\r\n          const rowObj = XLSX.utils.sheet_to_row_object_array(wb.Sheets[sheetName])\r\n          getTableData(rowObj, result[0].name)\r\n        })\r\n      }\r\n      if (result.length && result[0].name.endsWith('xlsx')) {\r\n        reader.readAsBinaryString(result[0])\r\n      } else {\r\n        toast.error(<ErrorToast />, { icon: false, hideProgressBar: true })\r\n      }\r\n    }\r\n  })\r\n\r\n  const handleFilter = e => {\r\n    const data = tableData\r\n    let filteredData = []\r\n    const value = e.target.value\r\n    setValue(value)\r\n\r\n    if (value.length) {\r\n      filteredData = data.filter(col => {\r\n        const keys = Object.keys(col)\r\n\r\n        const startsWithCondition = keys.filter(key => {\r\n          return col[key].toString().toLowerCase().startsWith(value.toLowerCase())\r\n        })\r\n\r\n        const includesCondition = keys.filter(key => col[key].toString().toLowerCase().includes(value.toLowerCase()))\r\n\r\n        if (startsWithCondition.length) return col[startsWithCondition]\r\n        else if (!startsWithCondition && includesCondition.length) return col[includesCondition]\r\n        else return null\r\n      })\r\n      setFilteredData(filteredData)\r\n      setValue(value)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  /*eslint-disable */\r\n  const headArr = tableData.length\r\n    ? tableData.map((col, index) => {\r\n        if (index === 0) return [...Object.keys(col)]\r\n        else return null\r\n      })\r\n    : []\r\n  /*eslint-enable */\r\n  const dataArr = value.length ? filteredData : tableData.length && !value.length ? tableData : null\r\n\r\n  const renderTableBody = () => {\r\n    if (dataArr !== null && dataArr.length) {\r\n      return dataArr.map((col, index) => {\r\n        const keys = Object.keys(col)\r\n        const renderTd = keys.map((key, index) => <td key={index}>{col[key]}</td>)\r\n        return <tr key={index}>{renderTd}</tr>\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  const renderTableHead = () => {\r\n    if (headArr.length) {\r\n      return headArr[0].map((head, index) => {\r\n        return <th key={index}>{head}</th>\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ExtensionsHeader\r\n        title='XLSX'\r\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\r\n        link='https://github.com/SheetJS/sheetjs'\r\n      />\r\n      <Row className='import-component'>\r\n        <Col sm='12'>\r\n          <Card>\r\n            <CardBody>\r\n              <Row>\r\n                <Col sm='12'>\r\n                  <div {...getRootProps({ className: 'dropzone' })}>\r\n                    <input {...getInputProps()} />\r\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\r\n                      <DownloadCloud size={64} />\r\n                      <h5>Drop Files here or click to upload</h5>\r\n                      <p className='text-secondary'>\r\n                        Drop files here or click{' '}\r\n                        <a href='/' onClick={e => e.preventDefault()}>\r\n                          browse\r\n                        </a>{' '}\r\n                        thorough your machine\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n        {tableData.length ? (\r\n          <Col sm='12'>\r\n            <Card>\r\n              <CardHeader className='justify-content-between flex-wrap'>\r\n                <CardTitle tag='h4'>{name}</CardTitle>\r\n                <div className='d-flex align-items-center justify-content-end'>\r\n                  <Label for='search-input' className='me-1'>\r\n                    Search\r\n                  </Label>\r\n                  <Input id='search-input' type='text' bsSize='sm' value={value} onChange={e => handleFilter(e)} />\r\n                </div>\r\n              </CardHeader>\r\n              <Table className='table-hover-animation' responsive>\r\n                <thead>\r\n                  <tr>{renderTableHead()}</tr>\r\n                </thead>\r\n                <tbody>{renderTableBody()}</tbody>\r\n              </Table>\r\n            </Card>\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Import\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ms-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  link: Proptypes.string,\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}